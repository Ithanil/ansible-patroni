- name: Determine and store main IPv4 address
  ansible.builtin.set_fact:
    patroni_main_ip: "{{ main_ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) }}"

- name: Copy pga_hba from template
  template:
    src: templates/pg_hba.j2
    dest: /tmp/pg_hba.tmp
  when: inventory_hostname == patroni_hosts[0]

- name: Apply pga_hba
  ansible.builtin.shell: patronictl -c /etc/patroni/15-main.yml edit-config --force --apply /tmp/pg_hba.tmp
  when: inventory_hostname == patroni_hosts[0]
  register: hba_diffs

- debug:
    msg: "{{ hba_diffs.stdout }}"
  when: inventory_hostname == patroni_hosts[0]


- name: Copy postgresql parameters from template
  template:
    src: templates/psql_parameters.j2
    dest: /tmp/psql_parameters.tmp
  when: psql_parameters is defined and psql_parameters|length > 0 and inventory_hostname == patroni_hosts[0]

- name: Apply postgresql parameters
  ansible.builtin.shell: patronictl -c /etc/patroni/15-main.yml edit-config --force --apply /tmp/psql_parameters.tmp
  when: psql_parameters is defined and psql_parameters|length > 0 and inventory_hostname == patroni_hosts[0]
  register: param_diffs

- debug:
    msg: "{{ param_diffs.stdout }}"
  when: psql_parameters is defined and psql_parameters|length > 0 and inventory_hostname == patroni_hosts[0]


- name: Apply patroni settings
  ansible.builtin.shell: patronictl -c /etc/patroni/15-main.yml edit-config --force --set {{ item.key }}="{{ item.value }}"
  loop: "{{ patroni_settings | dict2items }}"
  when: patroni_settings is defined and patroni_settings|length > 0 and inventory_hostname == patroni_hosts[0]
  register: settings_diffs

- debug:
    msg: "{{ settings_diffs.results | map(attribute='stdout') | join('\n') }}"
  when: patroni_settings is defined and patroni_settings|length > 0 and inventory_hostname == patroni_hosts[0]


- name: Update tags
  ansible.builtin.blockinfile:
    path: "/etc/patroni/{{ psql_major_version }}-{{ psql_cluster_name }}.yml"
    insertafter: "EOF"
    block: |
      {% if item.value|length > 0 %}
      tags:
        {% for tag in item.value|dict2items %}
        {{ tag.key }}: {{ tag.value }}
        {% endfor %}
      {% endif %}
  loop: "{{ lookup('ansible.builtin.dict', patroni_tags) }}"
  when: inventory_hostname in item.key
  register: result

- name: Restart Patroni service if tags changed
  ansible.builtin.systemd_service:
    name: patroni@{{ psql_major_version }}-{{ psql_cluster_name }}
    state: restarted
  when: result.changed
